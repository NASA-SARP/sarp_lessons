Traceback (most recent call last):
  File "/Users/rwegener/miniconda3/envs/sarp/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Users/rwegener/miniconda3/envs/sarp/lib/python3.13/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/rwegener/miniconda3/envs/sarp/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/Users/rwegener/miniconda3/envs/sarp/lib/python3.13/asyncio/base_events.py", line 720, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Users/rwegener/miniconda3/envs/sarp/lib/python3.13/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Users/rwegener/miniconda3/envs/sarp/lib/python3.13/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/rwegener/miniconda3/envs/sarp/lib/python3.13/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
water_vars.index.str.contains('k')
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[6], line 1[0m
[0;32m----> 1[0m [43mwater_vars[49m[38;5;241;43m.[39;49m[43mindex[49m[38;5;241;43m.[39;49m[43mstr[49m[38;5;241m.[39mcontains([38;5;124m'[39m[38;5;124mk[39m[38;5;124m'[39m)

File [0;32m~/miniconda3/envs/sarp/lib/python3.13/site-packages/pandas/core/accessor.py:224[0m, in [0;36mCachedAccessor.__get__[0;34m(self, obj, cls)[0m
[1;32m    221[0m [38;5;28;01mif[39;00m obj [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    222[0m     [38;5;66;03m# we're accessing the attribute of the class, i.e., Dataset.geo[39;00m
[1;32m    223[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_accessor
[0;32m--> 224[0m accessor_obj [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_accessor[49m[43m([49m[43mobj[49m[43m)[49m
[1;32m    225[0m [38;5;66;03m# Replace the property with the accessor object. Inspired by:[39;00m
[1;32m    226[0m [38;5;66;03m# https://www.pydanny.com/cached-property.html[39;00m
[1;32m    227[0m [38;5;66;03m# We need to use object.__setattr__ because we overwrite __setattr__ on[39;00m
[1;32m    228[0m [38;5;66;03m# NDFrame[39;00m
[1;32m    229[0m [38;5;28mobject[39m[38;5;241m.[39m[38;5;21m__setattr__[39m(obj, [38;5;28mself[39m[38;5;241m.[39m_name, accessor_obj)

File [0;32m~/miniconda3/envs/sarp/lib/python3.13/site-packages/pandas/core/strings/accessor.py:191[0m, in [0;36mStringMethods.__init__[0;34m(self, data)[0m
[1;32m    188[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21m__init__[39m([38;5;28mself[39m, data) [38;5;241m-[39m[38;5;241m>[39m [38;5;28;01mNone[39;00m:
[1;32m    189[0m     [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01mpandas[39;00m[38;5;21;01m.[39;00m[38;5;21;01mcore[39;00m[38;5;21;01m.[39;00m[38;5;21;01marrays[39;00m[38;5;21;01m.[39;00m[38;5;21;01mstring_[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m StringDtype
[0;32m--> 191[0m     [38;5;28mself[39m[38;5;241m.[39m_inferred_dtype [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate[49m[43m([49m[43mdata[49m[43m)[49m
[1;32m    192[0m     [38;5;28mself[39m[38;5;241m.[39m_is_categorical [38;5;241m=[39m [38;5;28misinstance[39m(data[38;5;241m.[39mdtype, CategoricalDtype)
[1;32m    193[0m     [38;5;28mself[39m[38;5;241m.[39m_is_string [38;5;241m=[39m [38;5;28misinstance[39m(data[38;5;241m.[39mdtype, StringDtype)

File [0;32m~/miniconda3/envs/sarp/lib/python3.13/site-packages/pandas/core/strings/accessor.py:245[0m, in [0;36mStringMethods._validate[0;34m(data)[0m
[1;32m    242[0m inferred_dtype [38;5;241m=[39m lib[38;5;241m.[39minfer_dtype(values, skipna[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[1;32m    244[0m [38;5;28;01mif[39;00m inferred_dtype [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m allowed_types:
[0;32m--> 245[0m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m([38;5;124m"[39m[38;5;124mCan only use .str accessor with string values![39m[38;5;124m"[39m)
[1;32m    246[0m [38;5;28;01mreturn[39;00m inferred_dtype

[0;31mAttributeError[0m: Can only use .str accessor with string values!

